package com.example.demo.repository;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.time.LocalDateTime;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

import com.example.demo.model.Product;
import org.springframework.stereotype.Component;

@Component
public class ProductDatabase {

    /*
     * This is a simple in-memory database implementation. It uses a
     * ConcurrentHashMap. It uses a weak seeding mechanism
     * to generate unique keys for each entry in the database. The keys are
     * generated by incrementing a counter based on
     * the current timestamp. This is a simple way to generate unique keys for each
     * entry in the database. This implementation is not
     * scalable, but good enough for some quick tests / demonstration purposes.
     * 
     * Assuming the program is running on a single machine, the timestamp is unique
     * enough for each entry in the in-memory database.
     * 
     * This is design-only implementation, the class would need to be refactored with templates
     * and interfaces + factory to make it a bit more generic and reusable.
     */
    //private final AtomicLong counter = new AtomicLong(System.currentTimeMillis());
    
    // let's make it simpler for now so that the behavior is a bit more deterministic for testing
    
    private final AtomicLong counter = new AtomicLong(0);

    private Map<String, Product> database = new ConcurrentHashMap<>();

    private String KEY_FORMAT = "%d";

    public Product store(Product value) {
        value.setId(String.format(KEY_FORMAT, counter.incrementAndGet()));
        database.put(value.getId(), value);
        return value;
    }

    public Product store(String key, Product value) {

        if (key != null) {
            database.put(key, value);
            return value;
        } else {
            value.setId(String.format(KEY_FORMAT, counter.incrementAndGet()));
            database.put(value.getId(), value);
            return value;
        }

    }

    public Product retrieve(String key) {
        if (key != null) {
            return database.get(key);
        } else {
            return null;
        }
    }

    public List<Product> retrieveAll() {
        final List<Product> products = new ArrayList<>();
        products.addAll( database.values() );
        return products;
    }

    public void clear() {
        database.clear();
        counter.set(0);
    }
}
